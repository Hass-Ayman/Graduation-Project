
class TemplateGeneration():
    
    def testbenchgeneration(self,path,parameters,rtl_module,rtl_ports,bindfile_module): #parameters(datawidth,ramdepth,addresswidth)
        file=open(path +"/testbench.sv","w")
        file.write("`timescale 1ns/1p\n")
        file.write("`define data_width ({})\n".format(parameters[0]))
        file.write("`define ram_depth ({})\n".format(parameters[1]))
        file.write("`define address_width ({})\n\n".format(parameters[2]))
        file.write("module memory_tb();\n\n")
        file.write("    reg clk;\n")
        file.write("    reg[`address_width-1:0] address;\n")        
        file.write("    wire[`data_width-1:0] data;\n")
        file.write("    reg we;\n")
        file.write("    reg oe;\n")
        file.write("    reg cs;\n")
        file.write("    reg[`data_width-1:0] data_out;\n\n")
        file.write("    {} bindass();\n\n".format(bindfile_module))
        file.write("    {} inst(.{}(clk), .{}(address), .{}(data), .{}(we), .{}(oe), .{}(cs);\n\n".format(rtl_module,rtl_ports[0],rtl_ports[1],rtl_ports[2],rtl_ports[3],rtl_ports[4],rtl_ports[5]))
        file.write("    initial begin\n")
        file.write("        clk <= 0;\n")
        file.write("        address <= 0;\n")
        file.write("        we <= 0;\n")
        file.write("        oe <= 0;\n")
        file.write("        cs <= 0;\n")
        file.write("        #5;\n")
        file.write("    end\n\n")
        file.write("    always\n")
        file.write("        #5  clk =  ! clk;\n\n")
        file.write("    assign data = (cs && we && !oe) ? data_out : {}'bz;\n\n".format(parameters[0]))
        
        file.write("endmodule")