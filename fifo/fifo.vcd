$date
	Thu Apr 12 02:22:09 2018
$end
$version
	QuestaSim Version 10.2c
$end
$timescale
	1ns
$end

$scope module fifo_tb $end
$var parameter 32 ! DATA_WIDTH $end
$var parameter 32 " ADDR_WIDTH $end
$var reg 1 # clk $end
$var wire 1 $ rst $end
$var wire 1 % wr_cs $end
$var wire 1 & rd_cs $end
$var wire 1 ' rd_en $end
$var wire 1 ( wr_en $end
$var wire 1 ) data_in [7] $end
$var wire 1 * data_in [6] $end
$var wire 1 + data_in [5] $end
$var wire 1 , data_in [4] $end
$var wire 1 - data_in [3] $end
$var wire 1 . data_in [2] $end
$var wire 1 / data_in [1] $end
$var wire 1 0 data_in [0] $end
$var wire 1 1 full $end
$var wire 1 2 empty $end
$var wire 1 3 data_out [7] $end
$var wire 1 4 data_out [6] $end
$var wire 1 5 data_out [5] $end
$var wire 1 6 data_out [4] $end
$var wire 1 7 data_out [3] $end
$var wire 1 8 data_out [2] $end
$var wire 1 9 data_out [1] $end
$var wire 1 : data_out [0] $end

$scope module bindass $end
$upscope $end

$scope module top $end
$upscope $end

$scope module fifo $end
$var parameter 32 ; DATA_WIDTH $end
$var parameter 32 < ADDR_WIDTH $end
$var parameter 32 = RAM_DEPTH $end
$var wire 1 > clk $end
$var wire 1 $ rst $end
$var wire 1 % wr_cs $end
$var wire 1 & rd_cs $end
$var wire 1 ' rd_en $end
$var wire 1 ( wr_en $end
$var wire 1 ) data_in [7] $end
$var wire 1 * data_in [6] $end
$var wire 1 + data_in [5] $end
$var wire 1 , data_in [4] $end
$var wire 1 - data_in [3] $end
$var wire 1 . data_in [2] $end
$var wire 1 / data_in [1] $end
$var wire 1 0 data_in [0] $end
$var wire 1 1 full $end
$var wire 1 2 empty $end
$var reg 8 ? data_out [7:0] $end
$var reg 3 @ wr_pointer [2:0] $end
$var reg 3 A rd_pointer [2:0] $end
$var reg 4 B status_cnt [3:0] $end
$var wire 1 C data_ram [7] $end
$var wire 1 D data_ram [6] $end
$var wire 1 E data_ram [5] $end
$var wire 1 F data_ram [4] $end
$var wire 1 G data_ram [3] $end
$var wire 1 H data_ram [2] $end
$var wire 1 I data_ram [1] $end
$var wire 1 J data_ram [0] $end

$scope begin WRITE_POINTER $end
$upscope $end

$scope begin READ_POINTER $end
$upscope $end

$scope begin READ_DATA $end
$upscope $end

$scope begin STATUS_COUNTER $end
$upscope $end

$scope module DP_RAM $end
$var parameter 32 K DATA_WIDTH $end
$var parameter 32 L ADDR_WIDTH $end
$var parameter 32 M RAM_DEPTH $end
$var wire 1 N address_0 [2] $end
$var wire 1 O address_0 [1] $end
$var wire 1 P address_0 [0] $end
$var wire 1 % cs_0 $end
$var wire 1 ( we_0 $end
$var wire 1 Q oe_0 $end
$var wire 1 R address_1 [2] $end
$var wire 1 S address_1 [1] $end
$var wire 1 T address_1 [0] $end
$var wire 1 & cs_1 $end
$var wire 1 U we_1 $end
$var wire 1 ' oe_1 $end
$var wire 1 ) data_0 [7] $end
$var wire 1 * data_0 [6] $end
$var wire 1 + data_0 [5] $end
$var wire 1 , data_0 [4] $end
$var wire 1 - data_0 [3] $end
$var wire 1 . data_0 [2] $end
$var wire 1 / data_0 [1] $end
$var wire 1 0 data_0 [0] $end
$var wire 1 C data_1 [7] $end
$var wire 1 D data_1 [6] $end
$var wire 1 E data_1 [5] $end
$var wire 1 F data_1 [4] $end
$var wire 1 G data_1 [3] $end
$var wire 1 H data_1 [2] $end
$var wire 1 I data_1 [1] $end
$var wire 1 J data_1 [0] $end
$var reg 8 V data_0_out [7:0] $end
$var reg 8 W data_1_out [7:0] $end

$scope begin MEM_WRITE $end
$upscope $end

$scope begin MEM_READ_0 $end
$upscope $end

$scope begin MEM_READ_1 $end
$upscope $end
$upscope $end
$upscope $end

$scope module U_assert $end
$var wire 1 X clk $end
$var wire 1 $ rst $end
$var wire 1 % wr_cs $end
$var wire 1 & rd_cs $end
$var wire 1 ' rd_en $end
$var wire 1 ( wr_en $end
$var wire 1 ) data_in [7] $end
$var wire 1 * data_in [6] $end
$var wire 1 + data_in [5] $end
$var wire 1 , data_in [4] $end
$var wire 1 - data_in [3] $end
$var wire 1 . data_in [2] $end
$var wire 1 / data_in [1] $end
$var wire 1 0 data_in [0] $end
$var wire 1 1 full $end
$var wire 1 2 empty $end
$var wire 1 3 data_out [7] $end
$var wire 1 4 data_out [6] $end
$var wire 1 5 data_out [5] $end
$var wire 1 6 data_out [4] $end
$var wire 1 7 data_out [3] $end
$var wire 1 8 data_out [2] $end
$var wire 1 9 data_out [1] $end
$var wire 1 : data_out [0] $end
$var integer 32 Y count $end
$var reg 8 Z cdata [7:0] $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0#
bx ?
bx @
bx A
bx B
b0 V
b0 W
b0 Z
b1000 !
b11 "
b1000 ;
b11 <
b1000 =
b1000 K
b11 L
b1000 M
bx Y
x$
0%
0&
0'
0(
00
0/
0.
0-
0,
0+
0*
0)
x1
x2
x:
x9
x8
x7
x6
x5
x4
x3
zJ
zI
zH
zG
zF
zE
zD
zC
0X
0>
0U
xT
xS
xR
0Q
xP
xO
xN
$end
#1
1#
1>
1X
#2
0#
0>
0X
#3
1#
1>
1X
#4
0#
0>
0X
#5
1#
1>
1X
#6
0#
0>
0X
#7
1#
1>
1X
#8
0#
0>
0X
#9
1#
1>
1X
1$
b0 Y
b0 @
b0 A
b0 ?
b0 B
0:
09
08
07
06
05
04
03
12
01
0T
0S
0R
0P
0O
0N
#10
0#
0>
0X
#11
1#
1>
1X
#12
0#
0>
0X
#13
1#
1>
1X
#14
0#
0>
0X
#15
1#
1>
1X
#16
0#
0>
0X
#17
1#
1>
1X
#18
0#
0>
0X
#19
1#
1>
1X
0$
#20
0#
0>
0X
#21
1#
1>
1X
#22
0#
0>
0X
#23
1#
1>
1X
#24
0#
0>
0X
#25
1#
1>
1X
#26
0#
0>
0X
#27
1#
1>
1X
#28
0#
0>
0X
#29
1#
1>
1X
#30
0#
0>
0X
#31
1#
1>
1X
1%
1(
1.
1+
#32
0#
0>
0X
#33
1#
1>
1X
b1 Y
b1 @
b1 B
02
1P
10
0.
0+
1)
1&
1'
0J
0I
0H
0G
0F
0E
0D
0C
b100100 W
1H
1E
#34
0#
0>
0X
#35
1#
1>
1X
b10 Y
b100100 Z
b1 A
b100100 ?
b10 @
18
15
0P
1O
1T
b10000001 W
1J
0H
0E
1C
1-
0)
#36
0#
0>
0X
#37
1#
1>
1X
b11 Y
b10000001 Z
b11 @
b10000001 ?
b10 A
1:
08
05
13
0T
1S
1P
b1001 W
1G
0C
1/
0-
1+
1*
#38
0#
0>
0X
#39
1#
1>
1X
b100 Y
b1001 Z
b11 A
b1001 ?
b100 @
17
03
0P
0O
1N
1T
b1100011 W
1I
0G
1E
1D
0/
1.
1-
0+
0*
#40
0#
0>
0X
#41
1#
1>
1X
b101 Y
b1100011 Z
b101 @
b1100011 ?
b100 A
19
07
15
14
0T
0S
1R
1P
b1101 W
0I
1H
1G
0E
0D
0%
0(
00
0.
0-
#42
0#
0>
0X
#43
1#
1>
1X
b100 Y
b1101 Z
b0 B
b101 A
b1101 ?
12
09
18
17
05
04
1T
0&
0'
zJ
zI
zH
zG
zF
zE
zD
zC
b0 W
#44
0#
0>
0X
#45
1#
1>
1X
#46
0#
0>
0X
#47
1#
1>
1X
#48
0#
0>
0X
#49
1#
1>
1X
#50
0#
0>
0X
#51
1#
1>
1X
#52
0#
0>
0X
#53
1#
1>
1X
#54
0#
0>
0X
#55
1#
1>
1X
#56
0#
0>
0X
#57
1#
1>
1X
#58
0#
0>
0X
#59
1#
1>
1X
#60
0#
0>
0X
#61
1#
1>
1X
#62
0#
0>
0X
#63
1#
1>
1X
#64
0#
0>
0X
#65
1#
1>
1X
#66
0#
0>
0X
#67
1#
1>
1X
#68
0#
0>
0X
#69
1#
1>
1X
#70
0#
0>
0X
#71
1#
1>
1X
#72
0#
0>
0X
#73
1#
1>
1X
#74
0#
0>
0X
#75
1#
1>
1X
#76
0#
0>
0X
#77
1#
1>
1X
#78
0#
0>
0X
#79
1#
1>
1X
#80
0#
0>
0X
#81
1#
1>
1X
#82
0#
0>
0X
#83
1#
1>
1X
