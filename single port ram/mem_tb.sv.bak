`timescale 1ns/1ps
`define data_width (8)
`define ram_depth (1024*1024*1024)
`define address_width (30)

module mem_tb();

    reg clk;
    reg[`address_width-1:0] address;
    wire[`data_width-1:0] data;
    reg we;
    reg oe;
    reg cs;
    reg[`data_width-1:0] data_out;

    binding_module bindass();

    ram_sp_sr_sw inst(.clk(clk), .address(address), .data(data), .we(we), .oe(oe), .cs(cs));

    initial begin
        clk <= 0;
        address <= 0;
        we <= 0;
        oe <= 0;
        cs <= 0;
        #5;
    end

    always
        #5  clk =  ! clk;

    assign data = (cs && we && !oe) ? data_out : 8'bz;

    default clocking mem_clk @(posedge clk);
        output oe, cs, address, we;
        input data;
    endclocking

		initial begin
		//write operations
		cs<=1;we<=1;
		
		for(int j=0;j<(0.15)*`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
			data_out=$urandom(j)%255;
		end
		#10;
		for(int j=(0.4)*`ram_depth;j<(0.6)*`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
			data_out=$urandom(j)%255;
		end
		#10;
		for(int j=(0.85)*`ram_depth;j<`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
			data_out=$urandom(j)%255;
		end
		#20;
		
		//Read Operations
		we<=0;oe<=1;
		
		for(int j=0;j<(0.15)*`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
		end
		#10;
		for(int j=(0.4)*`ram_depth;j<(0.6)*`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
		end
		#10;
		for(int j=(0.85)*`ram_depth;j<`ram_depth;j=j+1) begin
			@(negedge clk)
			address<=j;
		end
		#20;
		
		$finish;
		end

endmodule